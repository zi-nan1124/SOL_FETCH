def save_transactions(self, transactions, start_slot, end_slot, market_address):
    """
    读取已有交易数据，去重后插入新交易
    :param transactions: Solana 交易列表
    :param start_slot: 起始 Slot
    :param end_slot: 结束 Slot
    :param market_address: 当前交易市场地址
    """
    if not transactions:
        print("⚠️ No transactions found.")
        return

    # 读取已有交易签名，避免重复插入
    existing_signatures = set()
    if os.path.exists(self.output_file):
        with open(self.output_file, mode='r', newline='', encoding="utf-8") as file:
            reader = csv.reader(file)
            next(reader, None)  # 跳过 CSV 头部
            for row in reader:
                if row:
                    existing_signatures.add(row[0].strip())  # **去除空格，确保纯字符串**

    # **初始化新写入计数**
    new_entries = 0
    first_slot, last_slot = None, None  # 记录 Slot 范围

    with open(self.output_file, mode='a', newline='', encoding="utf-8") as file:
        writer = csv.writer(file)

        # **确保 CSV 头部写入**
        if os.stat(self.output_file).st_size == 0:
            writer.writerow(["Signature", "Slot", "Market_Address"])  # **新增 `Market Address`**

        # **去重并存储新交易**
        for txn in transactions:
            sig = str(txn.signature).strip().replace("\n", "").replace("Signature(", "").replace(")", "")  # **处理转义符**
            txn_slot = txn.slot  # **获取 Slot**
            last_slot = txn_slot  # **更新最后 Slot**

            if first_slot is None:
                first_slot = txn_slot  # 记录第一条交易的 Slot

            if txn.err is None:
                if start_slot <= txn_slot <= end_slot:
                    if sig not in existing_signatures:  # **确保去重**
                        writer.writerow([sig, txn_slot, market_address])
                        existing_signatures.add(sig)  # **即时更新 `existing_signatures`**
                        new_entries += 1

    # **打印存储信息**
    print(f"✅ {new_entries} new transactions saved to {self.output_file} | Slot Range: {first_slot} - {last_slot}")
